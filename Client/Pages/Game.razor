@using GeneralInformationGame.Client.Services
@using GeneralInformationGame.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@page "/GameInfo/{Id:int}"
@inject IGameService gameService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
<h3>@game?.Name</h3>
<div class="row"><button @onclick="() => GoToParticipant()" type="button" class="btn btn-primary btn-sm">New Participant</button></div>
<table class="table table-striped table-dark">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Score</th>
            <th scope="col">Correct</th>
            <th scope="col">InCorrect</th>
            <th scope="col">Delete</th>
        </tr>
    </thead>
    <tbody>
        @if(game != null)
        {
            int RowNumber = 0;
            foreach (var user in game.Participants.OrderByDescending(o=>o.Score))
            {
                RowNumber++;
                <tr>
                    <th scope="row">@RowNumber</th>
                    <td>@user.Name</td>
                    <td>@user.Score</td>
                    <td>@user.CorrectAnswers</td>
                    <td>@user.IncorrectAnswers</td>
                    <td>
                        <button @onclick="(() => DeleteParticipant_Click(user.Id))"
                        class="btn btn-danger sm"><i class="fa fa-trash"></i></button>
                    </td>
                </tr>
            }
        }
        
    </tbody>
</table>
<div class="row"><button @onclick="()=> NextQuestion()" disabled="@IsDisabled" type="button" class="btn btn-primary" id="navigation-btn">@ButtonName</button></div>
@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    public GeneralInformationGame.Shared.Models.Game? game { get; set; }
    public bool IsDisabled { get; set; } = false;
    public string ButtonName { get; set; } = "Show Question";

}
@functions
{
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        game = await gameService.ShowGame(Id, user.Identity.Name);
        if (game.Participants.Count == 0)
        {
            IsDisabled = true;
           
        }
        else{
            if (game.Participants.Sum(s=>s.CorrectAnswers+s.IncorrectAnswers) == (game.Participants.Count * game.QuestionCount))
            {
                IsDisabled = true;
                ButtonName = "Is Finished";
            }
        }

        
       
    }
    private void GoToParticipant()
    {
        var questionCount = game.Questions.ToList().Count;
        if (game.Participants.Count > 0 && game.Participants.Sum(s => s.CorrectAnswers + s.IncorrectAnswers) > 0)
        {
             JsRuntime.InvokeVoidAsync("alert", "You cannot Add new participant after starting the game!");
        }
        else{
            NavigationManager.NavigateTo($"/NewParticipant/{game.Id}");
        }
    }
    private async Task DeleteParticipant_Click(int id)
    {
        var questionCount = game.Participants.Sum(s=>s.CorrectAnswers + s.IncorrectAnswers);
        if (questionCount == 0)
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure to Delete this participant?");
            if (confirmed)
            {
                await gameService.RemoveParticipant(id);
                game.Participants.Remove(game.Participants.Single(s => s.Id == id));
                this.StateHasChanged();
            }
        }
        else{
            await JsRuntime.InvokeVoidAsync("alert", "You cannot delete any participant after starting the game!"); // Alert
        }
        
    }
    private void NextQuestion()
    {
        NavigationManager.NavigateTo($"/ShowQuestion/{game.Id}");
    }
}
